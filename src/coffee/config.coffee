AGENT = window.navigator.userAgent

HEIGHT = document.documentElement.clientHeight
WIDTH = document.documentElement.clientWidth
MAX_HEIGHT = 568
MAX_WIDTH = 360
HEIGHT = if HEIGHT > MAX_HEIGHT then MAX_HEIGHT else HEIGHT
WIDTH = if WIDTH > MAX_WIDTH then MAX_WIDTH else WIDTH

# 图片的宽高比
SHEEP_IMG_RATE = 150 / 172
CLOUD_IMG_RATE = 71 / 41
# 羊宽度相对于云宽度的比例
SHEEP_TO_CLOUD_RATE = 0.8
# 两边的装饰墙占屏幕宽度的比例
SIDE_WALL_RATE = 0.1
# 除去装饰墙漂浮物的列数
COLUMN_COUNT = 6

# 漂浮物的默认宽高
DEFAULT_FLUTTER_WIDTH = WIDTH * (1 - SIDE_WALL_RATE) / COLUMN_COUNT
DEFAULT_FLUTTER_HEIGHT = DEFAULT_FLUTTER_WIDTH / CLOUD_IMG_RATE

# 羊的默认宽高
DEFAULT_SHEEP_WIDTH = DEFAULT_FLUTTER_WIDTH * SHEEP_TO_CLOUD_RATE
DEFAULT_SHEEP_HEIGHT = DEFAULT_SHEEP_WIDTH / SHEEP_IMG_RATE

# 除去地面或计时条漂浮物的行数
RAW_COUNT = Math.floor(HEIGHT / DEFAULT_FLUTTER_HEIGHT) - 1
# 网格高度，也是计时条和地面的高度
GRID_HEIGHT = HEIGHT / (RAW_COUNT + 1)
# 网格中生成漂浮物垂直方向的最大偏移值
GRID_OFFSET_Y = GRID_HEIGHT - DEFAULT_FLUTTER_HEIGHT 
# 每网格的米数
METER_PER_GRID = 1
# 羊正常跳的高度
ONE_RISE_HEIGHT = 5 * GRID_HEIGHT
# 得分的基准线
BASE_LINE = Math.floor(HEIGHT - ONE_RISE_HEIGHT - DEFAULT_SHEEP_HEIGHT) + 1
# 将地面改成时间条的得分线
GROUND_TO_TIME_BAR_SCORE = 50

# 产生漂浮物的策略
KINDS = ["white-cloud", "empty-cloud", "black-cloud", "red-packet"]
STRATEGY =
    amountProbilities: [0.6, 0.3, 0.1]
    kindProbilities: [0.45, 0.3, 0.15, 0.1]

config = 
    AGENT: AGENT
    WIDTH: WIDTH
    HEIGHT: HEIGHT
    BASE_LINE: BASE_LINE
    ONE_RISE_HEIGHT: ONE_RISE_HEIGHT

    SIDE_WALL_RATE: SIDE_WALL_RATE
    COLUMN_COUNT: COLUMN_COUNT
    RAW_COUNT: RAW_COUNT

    DEFAULT_FLUTTER_WIDTH: DEFAULT_FLUTTER_WIDTH 
    DEFAULT_FLUTTER_HEIGHT: DEFAULT_FLUTTER_HEIGHT 

    DEFAULT_SHEEP_WIDTH: DEFAULT_SHEEP_WIDTH
    DEFAULT_SHEEP_HEIGHT: DEFAULT_SHEEP_HEIGHT

    GRID_HEIGHT: GRID_HEIGHT
    GRID_OFFSET_Y: GRID_OFFSET_Y
    METER_PER_GRID: METER_PER_GRID

    KINDS: KINDS
    STRATEGY: STRATEGY

console.log config
module.exports = config